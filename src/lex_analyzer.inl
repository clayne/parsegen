// Lexegen autogenerated analyzer file - do not edit!

static int symb2meta[256] = {
    0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 4, 5, 6, 7, 1,
    8, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 1, 1, 1, 1, 1, 1, 1, 11, 11, 11, 11, 11, 11, 12, 12, 12,
    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 14, 15, 1, 12, 1, 16, 17, 18, 11, 19, 20,
    21, 22, 23, 12, 24, 25, 12, 26, 27, 28, 12, 29, 30, 31, 12, 32, 12, 33, 12, 12, 34, 1, 35, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1
};

static int def[84] = {
    -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, 35, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
};

static int base[84] = {
    0, 36, 71, 74, 74, 72, 85, 106, 85, 76, 109, 109, 109, 109, 109, 109, 109, 133, 145, 109, 100, 145, 145, 166, 145,
    145, 145, 145, 145, 145, 126, 160, 146, 183, 206, 229, 137, 148, 164, 148, 148, 130, 138, 131, 131, 131, 145, 144,
    151, 158, 152, 181, 160, 160, 152, 184, 165, 172, 196, 165, 174, 171, 193, 220, 194, 205, 212, 213, 217, 245, 264,
    244, 234, 266, 235, 244, 241, 243, 270, 241, 242, 245, 244, 274
};

static int next[310] = {
    25, 26, 22, 27, 28, 29, 30, 31, 32, 26, 26, 33, 33, 34, 26, 26, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
    33, 33, 33, 33, 33, 35, 26, 3, 23, 23, 3, 24, 23, 23, 23, 23, 23, 23, 23, 23, 23, 7, 23, 23, 23, 23, 23, 23, 23, 23,
    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 4, 5, 22, 4, 4, 4, 4, 6, 4, 4, 4, 4, 4, 20, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 21, 8, 8, 8, 8, 8, 9, 8, 8, 8, 8, 8, 8, 10, 11, 8, 8, 12, 8, 8, 8,
    8, 8, 13, 8, 8, 14, 8, 15, 16, 17, 8, 8, 18, 18, 18, 79, 36, 36, 74, 18, 18, 18, 18, 18, 19, 19, 19, 71, 64, 59, 56,
    19, 19, 19, 19, 19, -1, 40, 52, -1, -1, 48, 37, 38, 38, 49, 41, 50, 51, 39, -1, 53, 54, 55, 57, 42, 43, 44, 45, 46,
    58, 47, 33, 33, 33, 33, 60, 61, 62, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 38, 38,
    63, 65, 66, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 36, 36, 67, 68, 69, 36, 36, 36,
    36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 70, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1
};

static int check[310] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 5, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 9, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 7, 20, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 17, 17, 17, 30, 36, 36, 41, 17, 17,
    17, 17, 17, 18, 18, 18, 42, 43, 44, 45, 18, 18, 18, 18, 18, 23, 31, 46, 23, 23, 47, 36, 38, 38, 48, 31, 49, 50, 38,
    23, 52, 53, 54, 56, 31, 31, 31, 31, 31, 57, 31, 33, 33, 33, 33, 59, 60, 61, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
    33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 62, 64, 65, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
    34, 34, 35, 35, 66, 67, 68, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 69, 71, 72, 74,
    75, 76, 77, 79, 80, 81, 82, 69, 69, 69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
    70, 70, 70, 70, 73, 73, 78, 78, 78, 78, 83, 83, 83, 83
};

static int accept[84] = {
    0, 0, 0, 65, 53, 52, 57, 128, 41, 4, 13, 17, 21, 29, 25, 33, 37, 40, 8, 9, 4, 5, 60, 44, 49, 137, 129, 133, 121,
    117, 128, 128, 125, 112, 128, 128, 0, 105, 0, 101, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 85, 0, 0, 93, 0,
    0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 89, 0, 0, 81, 0, 0, 0, 0, 73, 0, 0, 0, 0, 109
};

static int lls_idx[85] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0
};

static int lls_list[1] = { 0 };

int lex(StateData& data, int state) {
    enum { kDeadFlag = 1, kTrailContFlag = 2, kFlagCount = 2 };
    if (data.state_stack.empty()) { data.pat_length = 0; }

    // Fill buffers till transition is impossible
    char symb = '\0';
    do {
        if (data.unread_text == data.text.data() + data.text.size()) { return -1; }
        symb = *data.unread_text;
        int meta = symb2meta[static_cast<unsigned char>(symb)];
        if (meta < 0) { break; }
        do {
            int l = base[state] + meta;
            if (check[l] == state) {
                state = next[l];
                break;
            }
            state = def[state];
        } while (state >= 0);
        if (state < 0) { break; }
        data.text[data.pat_length++] = symb;
        ++data.unread_text;
        data.state_stack.push_back(state);
    } while (symb != 0 && !(accept[state] & kDeadFlag));

    // Unroll downto last accepting state
    while (!data.state_stack.empty()) {
        int n_pat = accept[data.state_stack.back()];
        if (n_pat > 0) {
            bool has_trailling_context = n_pat & kTrailContFlag;
            n_pat >>= kFlagCount;
            if (has_trailling_context) {
                do {
                    state = data.state_stack.back();
                    for (int i = lls_idx[state]; i < lls_idx[state + 1]; ++i) {
                        if (lls_list[i] == n_pat) {
                            data.state_stack.clear();
                            return n_pat;
                        }
                    }
                    *(--data.unread_text) = data.text[--data.pat_length];
                    data.state_stack.pop_back();
                } while (!data.state_stack.empty());
            }
            data.state_stack.clear();
            return n_pat;
        }
        *(--data.unread_text) = data.text[--data.pat_length];
        data.state_stack.pop_back();
    }

    // Default pattern
    data.text[data.pat_length++] = *data.unread_text++;
    return std_pat_default;
}
