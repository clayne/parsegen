// Lexegen autogenerated analyzer file - do not edit!

static int symb2meta[256] = {
    0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 4, 5, 6, 7, 1,
    8, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 1, 1, 1, 1, 1, 1, 1, 11, 11, 11, 11, 11, 11, 12, 12, 12,
    12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 14, 15, 1, 12, 1, 16, 17, 18, 19, 20, 21,
    22, 23, 24, 12, 25, 26, 27, 28, 29, 30, 12, 31, 32, 33, 34, 35, 12, 36, 37, 12, 38, 1, 39, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1
};

static int def[99] = {
    -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, 35, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, 79, 79, 79, 79, 79, 79, 79, 79,
    79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79
};

static int base[99] = {
    0, 40, 79, 82, 82, 80, 93, 118, 93, 84, 121, 121, 121, 121, 121, 121, 121, 149, 162, 121, 112, 161, 161, 184, 161,
    161, 161, 161, 161, 161, 183, 214, 161, 239, 266, 293, 152, 163, 213, 163, 163, 145, 144, 145, 145, 145, 153, 156,
    161, 169, 162, 196, 174, 174, 191, 225, 205, 208, 227, 194, 205, 202, 204, 233, 205, 218, 203, 204, 208, 220, 239,
    218, 208, 246, 213, 228, 224, 226, 279, 315, 261, 260, 305, 251, 287, 276, 279, 306, 338, 305, 302, 319, 325, 308,
    317, 311, 327, 326, 317
};

static int next[378] = {
    25, 26, 22, 27, 28, 29, 30, 31, 32, 26, 26, 33, 33, 34, 26, 26, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
    33, 33, 33, 33, 33, 33, 33, 33, 33, 35, 26, 3, 23, 23, 3, 24, 23, 23, 23, 23, 23, 23, 23, 23, 23, 7, 23, 23, 23, 23,
    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 4, 5, 22, 4, 4, 4, 4, 6, 4, 4,
    4, 4, 4, 20, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 21, 8, 8, 8, 8, 8, 9,
    8, 8, 8, 8, 8, 8, 10, 11, 8, 8, 8, 12, 8, 8, 8, 8, 8, 8, 13, 8, 8, 14, 8, 15, 8, 16, 17, 8, 8, 8, 18, 18, 18, 36,
    36, 74, 71, 18, 18, 18, 18, 18, 18, 19, 19, 19, 64, 59, 56, 52, 19, 19, 19, 19, 19, 19, -1, 48, 49, -1, -1, 50, 51,
    37, 79, 79, 79, 79, 53, 54, -1, 80, 79, 79, 81, 82, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
    79, 40, 38, 38, 55, 57, 58, 60, 39, 61, 41, 62, 63, 65, 66, 67, 68, 69, 70, 72, 42, 73, 43, 44, 45, 46, 75, 47, 33,
    33, 33, 33, 76, 77, 78, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 38,
    38, 96, 91, 89, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 36, 36, 88,
    86, 87, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 79, 83, 84, 79, 79,
    85, 88, 90, 88, 92, 93, 94, 95, 88, 97, 98, 95, 79, 79, 79, 79, 79, -1, -1, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
    79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, -1, -1
};

static int check[378] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 2, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 9, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 7, 7, 20, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
    7, 7, 7, 17, 17, 17, 36, 36, 41, 42, 17, 17, 17, 17, 17, 17, 18, 18, 18, 43, 44, 45, 46, 18, 18, 18, 18, 18, 18, 23,
    47, 48, 23, 23, 49, 50, 36, 30, 30, 30, 30, 52, 53, 23, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 31, 38, 38, 54, 56, 57, 59, 38, 60, 31, 61, 62, 64, 65, 66, 67, 68, 69, 71, 31, 72, 31,
    31, 31, 31, 74, 31, 33, 33, 33, 33, 75, 76, 77, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
    33, 33, 33, 33, 33, 34, 34, 80, 81, 83, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
    34, 34, 34, 35, 35, 84, 85, 86, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
    35, 79, 82, 82, 79, 79, 82, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 79, 79, 79, 79, 79, 79, 79, 88, 88, 88, 88,
    88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88
};

static int accept[99] = {
    0, 0, 0, 32, 26, 26, 28, 66, 20, 2, 6, 8, 10, 14, 12, 16, 18, 20, 4, 4, 2, 2, 30, 22, 24, 70, 66, 68, 62, 60, 66,
    66, 64, 58, 66, 66, 0, 52, 0, 50, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 42, 0, 0, 46, 0, 0, 0, 0, 38, 0, 0,
    0, 0, 0, 0, 44, 0, 0, 40, 0, 0, 0, 0, 36, 56, 56, 56, 56, 56, 56, 56, 56, 56, 54, 56, 56, 56, 56, 56, 56, 56, 56,
    56, 56
};

static int lls_idx[100] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

static int lls_list[1] = { 0 };

int lex(CtxData& ctx, std::vector<int>& state_stack) {
    enum { kTrailContFlag = 1, kFlagCount = 1 };

    // Fill buffers till transition is impossible
    char symb = '\0';
    int state = state_stack.back();
    do {
        if (ctx.in_next == ctx.in_boundary) { return -1; }
        symb = *ctx.in_next;
        int meta = symb2meta[static_cast<unsigned char>(symb)];
        if (meta < 0) { break; }
        do {
            int l = base[state] + meta;
            if (check[l] == state) {
                state = next[l];
                break;
            }
            state = def[state];
        } while (state >= 0);
        if (state < 0) { break; }
        ++ctx.in_next, *ctx.out_last++ = symb;
        state_stack.push_back(state);
    } while (symb != 0);

    // Unroll downto last accepting state
    while (ctx.out_last != ctx.out_first) {
        int n_pat = accept[state_stack.back()];
        if (n_pat > 0) {
            bool has_trailling_context = n_pat & kTrailContFlag;
            n_pat >>= kFlagCount;
            if (has_trailling_context) {
                do {
                    state = state_stack.back();
                    for (int i = lls_idx[state]; i < lls_idx[state + 1]; ++i) {
                        if (lls_list[i] == n_pat) {
                            ptrdiff_t n_remove = ctx.out_last - ctx.out_first;
                            state_stack.erase(state_stack.end() - n_remove, state_stack.end());
                            return n_pat;
                        }
                    }
                    *(--ctx.in_next) = *(--ctx.out_last);
                    state_stack.pop_back();
                } while (ctx.out_last != ctx.out_first);
            }
            ptrdiff_t n_remove = ctx.out_last - ctx.out_first;
            state_stack.erase(state_stack.end() - n_remove, state_stack.end());
            return n_pat;
        }
        *(--ctx.in_next) = *(--ctx.out_last);
        state_stack.pop_back();
    }

    // Default pattern
    *ctx.out_last++ = *ctx.in_next++;
    return predef_pat_default;
}
